version: "3.9"
services:
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
#    container_name: elasticsearch
#    environment:
#      - xpack.security.enabled=false
#      - discovery.type=single-node
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#      nofile:
#        soft: 65536
#        hard: 65536
#    cap_add:
#      - IPC_LOCK
#    volumes:
#      - elasticsearch-data:/usr/share/elasticsearch/data
#    networks:
#      - main
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#
#  kibana:
#    container_name: kibana
#    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
#    environment:
#      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
#    networks:
#      - main
#    ports:
#      - "5601:5601"
#    depends_on:
#      - elasticsearch


  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    networks:
      - main
    ports:
      - "5432:5432"
    restart: on-failure
    volumes:
      - postgres_data:/var/lib/postgresql/data


  app:
    build: .
    command: sh -c "cd src/ && python manage.py migrate && python manage.py makemigrations && gunicorn VLE.wsgi -b 0.0.0.0:8000"
    container_name: app
    volumes:
      - .:/code/
    depends_on:
      - postgres
    expose:
      - "8000"
    networks:
      - main
    restart: on-failure

  nginx:
    container_name: nginx
    command: nginx -g 'daemon off;'
    depends_on:
      - app
    image: nginx:latest
    networks:
      - main
    ports:
      - "80:80"
    restart: on-failure
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf


networks:
  main:

volumes:
#  elasticsearch-data:
  postgres_data: